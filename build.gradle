buildscript {
	dependencies {
		classpath "org.kohsuke:github-api:1.329"
	}
}

plugins {
	id "fabric-loom" version "${loom_version}"
	id "me.modmuss50.mod-publish-plugin" version "0.8.4"
	id "com.diffplug.spotless" version "7.2.1"
}

def ENV = System.getenv()

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {url = "https://maven.shedaniel.me/"}
	maven {url = "https://maven.terraformersmc.com/releases/"}
}

// Override vulnerable dependencies until Minecraft updates to newer versions
configurations.configureEach {
	resolutionStrategy {
		// v2.5.1, used by Minecraft 1.21.4 - 1.21.7, is vulnerable to CVE-2024-57699
		force "net.minidev:json-smart:2.5.2"
		// v2.13.4, used by Minecraft 1.21.4 - 1.21.7, is vulnerable to CVE-2025-52999
		force "com.fasterxml.jackson.core:jackson-core:2.15.0"
		// v3.17.0, used by Minecraft 1.21.4 - 1.21.7, is vulnerable to CVE-2025-48924
		force "org.apache.commons:commons-lang3:3.18.0"
		// v9.40, used by Minecraft 1.21.4 - 1.21.7, is vulnerable to CVE-2025-53864
		force "com.nimbusds:nimbus-jose-jwt:10.0.2"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Mod Menu
	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
	include "com.terraformersmc:modmenu:${project.modmenu_version}"
	
	// Cloth Config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	
	// Apache POI for Excel export
	implementation "org.apache.poi:poi:5.4.1"
	implementation "org.apache.poi:poi-ooxml:5.4.1"
	include "org.apache.poi:poi:5.4.1"
	include "org.apache.poi:poi-ooxml:5.4.1"
	
	constraints {
		modApi("org.yaml:snakeyaml:2.2") {
			because "version 1.27 pulled from cloth-config has security vulnerabilities"
		}
		modApi("com.google.code.gson:gson:2.11.0") {
			because "version 2.8.1 pulled from cloth-config has security vulnerabilities"
		}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/signfinder.accesswidener")
}

configurations {
	productionRuntime {
		extendsFrom configurations.minecraftLibraries
		extendsFrom configurations.loaderLibraries
		extendsFrom configurations.minecraftRuntimeLibraries
	}
}

dependencies {
	productionRuntime "net.fabricmc:fabric-loader:${project.loader_version}"
	productionRuntime "net.fabricmc:intermediary:${project.minecraft_version}"
}

import net.fabricmc.loom.util.Platform
tasks.register('runEndToEndTest', JavaExec) {
	dependsOn remapJar, downloadAssets
	classpath.from configurations.productionRuntime
	mainClass = "net.fabricmc.loader.impl.launch.knot.KnotClient"
	workingDir = file("run")
	
	doFirst {
		classpath.from loom.minecraftProvider.minecraftClientJar
		workingDir.mkdirs()
		
		args(
			"--assetIndex", loom.minecraftProvider.versionInfo.assetIndex().fabricId(loom.minecraftProvider.minecraftVersion()),
			"--assetsDir", new File(loom.files.userCache, "assets").absolutePath,
			"--gameDir", workingDir.absolutePath
		)
		
		if (Platform.CURRENT.operatingSystem.isMacOS()) {
			jvmArgs("-XstartOnFirstThread")
		}
		
		jvmArgs(
			"-Dfabric.addMods=${configurations.modImplementation.find { it.name.contains('fabric-api') }.absolutePath}${File.pathSeparator}${remapJar.archiveFile.get().asFile.absolutePath}",
			"-Dsignfinder.e2eTest",
			"-Dfabric-tag-conventions-v2.missingTagTranslationWarning=fail",
			"-Dfabric-tag-conventions-v1.legacyTagWarning=fail",
			"-Dmixin.debug.verify=true",
			"-Dmixin.debug.countInjections=true"
		)
	}
}

processResources {
	inputs.property "version", project.version
	
	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.20.5 (24w14a) upwards uses Java 21.
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
	
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName
	
	from("LICENSE") {
		rename {"${it}_${inputs.properties.archivesName}"}
	}
	
	exclude("intentionally_untranslated.json")
}

import com.diffplug.spotless.generic.LicenseHeaderStep

spotless {
	lineEndings = "WINDOWS"
	java {
		removeUnusedImports()
		leadingSpacesToTabs()
		trimTrailingWhitespace()
		eclipse().configFile(file("codestyle/formatter.xml"))
	}

	json {
		target "src/**/*.json"
		gson().indentWithSpaces(2).version("2.11.0")
	}
}
